openapi: 3.0.0
info:
  title: API Wrapper
  description: Various APIs wrapped in a single API.
  version: 1.0.0
servers:
  - url: https://gpt.theexponential.net
paths:
  /search:
    post:
      operationId: searchQuery
      summary: Executes a search query.
      description: Accepts a search query and returns results.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                query:
                  type: string
                  description: The search query string.
  /paperSearch:
    post:
      operationId: paperSearchQuery
      summary: Executes a search query against a scientific paper database.
      description: Accepts a search query and returns results.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                query:
                  type: string
                  description: The search query string.
  /browsePage:
    post:
      operationId: browsePage
      summary: Scrape a specific url and get the contents of the page.
      description: Accepts a url and returns the contents of the page.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                url:
                  type: string
                  description: The url of the page to scrape.
  /codeRunner:
    post:
      operationId: runCode
      summary: Run specified code in a specified language.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [code, lang]
              properties:
                code:
                  type: string
                  description: The code to run.
                lang:
                  type: string
                  enum: [rust, nodejs, c, cpp, csharp, go, bash, lua, java]
  /pythonSandbox:
    post:
      operationId: pythonSandbox
      summary: Run specified code in a networked python sandbox. Add additional python/system (apt) packages.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [code, pyPackages, sysPackages]
              properties:
                code:
                  type: string
                  description: The code to run.
                pyPackages:
                  type: array
                  items:
                    type: string
                  description: Additional python packages to install. Pip/PyPi package names.
                sysPackages:
                  type: array
                  items:
                    type: string
                  description: Additional system packages to install. Ubuntu/Apt package names.
  /imageGen:
    post:
      operationId: generateImage
      summary: Generates an image based on the provided prompt and specifications.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [prompt, aspect_ratio, num_images]
              properties:
                prompt:
                  type: string
                aspect_ratio:
                  type: string
                  enum: [square, landscape, portrait]
                num_images:
                  type: integer
                  minimum: 1
                  maximum: 1
                model:
                  type: string
                  enum: [sd-xl, playground-v2, open-dalle]
  /languageModels:
    post:
      operationId: languageModels
      summary: Ask a question/give a prompt to a language model.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [prompt, aspect_ratio, num_images]
              properties:
                prompt:
                  type: string
                model:
                  type: string
                  enum: [mistral-7b, mistral-small, mistral-medium, google-gemini-pro]